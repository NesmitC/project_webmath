# app/routes.py

from flask import Blueprint, render_template, jsonify, request, url_for, flash, session, redirect
from .assistant import ask_teacher
from .neuro_method import ask_methodist  # ‚úÖ –ò–º–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–∞
from app.models import TestType, Test, Question, User, Result
import os
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
from itsdangerous import URLSafeTimedSerializer
from flask_mail import Message
from app import db, mail
import re
from app.utils.primary_to_secondary import get_secondary_score
from flask_login import current_user
from datetime import datetime, timezone


main = Blueprint('main', __name__)


# ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash("‚ö†Ô∏è –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.")
            return redirect(url_for('main.login'))
        return f(*args, **kwargs)
    return decorated_function

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@main.route('/')
def index():
    return render_template('index.html')



@main.route('/ask', methods=['POST'])
def ask():
    data = request.get_json()
    question = data.get('question', '').strip()

    if not question:
        return jsonify({"answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."})

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –ª–∏ –≤–æ–ø—Ä–æ—Å
    methodist_response = ask_methodist(question)
    if methodist_response:
        return jsonify({
            "answer": f"–ú–µ—Ç–æ–¥–∏—Å—Ç: {methodist_response}"
        })

    # –ï—Å–ª–∏ –Ω–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç —É—á–∏—Ç–µ–ª—å
    teacher_response = ask_teacher(question)
    return jsonify({
        "answer": f"–£—á–∏—Ç–µ–ª—å: {teacher_response}"
    })


@main.route('/about')
def about():
    return render_template('about.html')


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
DATA_FILE = os.path.join(os.path.dirname(__file__), '..', 'database', 'examenator.db')



# --- –≠–ö–ó–ê–ú–ï–ù–ê–¢–û–†: –≤—ã–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---
@main.route('/examenator')
@login_required
def examenator():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: –≤—Ö–æ–¥—è—â–∞—è, —Ç–µ–∫—É—â–∞—è, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è.
    """
    examenator_data = {}
    valid_types = ['incoming', 'current', 'final']

    for test_type in TestType.query.filter(TestType.diagnostic_type.in_(valid_types)).all():
        test = Test.query.filter_by(test_type_id=test_type.id).first()
        if test and len(test.questions) > 0:
            examenator_data[test_type.diagnostic_type] = {
                'title': test_type.title,
                'description': test_type.description,
                'test_id': test.id,
                'diagnostic_type': test_type.diagnostic_type
            }

    return render_template('examenator.html', examenatorData=examenator_data)

# --- –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –¢–ï–°–¢–ê –¶–ï–õ–ò–ö–û–ú ---
@main.route('/test/<diagnostic_type>')
@login_required
def start_test(diagnostic_type):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ç–∏–ø—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    –í—Å—ë –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    if diagnostic_type not in ['incoming', 'current', 'final']:
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        return redirect(url_for('main.examenator'))

    test_type = TestType.query.filter_by(diagnostic_type=diagnostic_type).first_or_404()
    test = Test.query.filter_by(test_type_id=test_type.id).first()

    if not test:
        flash(f"–¢–µ—Å—Ç '{test_type.title}' –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return redirect(url_for('main.examenator'))

    questions = Question.query.filter_by(test_id=test.id).order_by(Question.question_number).all()
    if not questions:
        flash("–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return redirect(url_for('main.examenator'))

    return render_template(
        'test_full.html',
        test=test,
        test_type=test_type,
        questions=questions
    )


@main.route('/question/<int:question_index>')
def question(question_index):
    if 'current_test_id' not in session:
        return redirect(url_for('main.examenator'))

    test_id = session['current_test_id']
    test = Test.query.get_or_404(test_id)
    questions = Question.query.filter_by(test_id=test_id).order_by(Question.question_number).all()

    if not questions:
        return redirect(url_for('main.examenator'))

    if question_index < 0 or question_index >= len(questions):
        return redirect(url_for('main.result'))

    current_question = questions[question_index]

    return render_template(
        'question.html',
        current_question=current_question,  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        index=question_index,
        total=len(questions)
    )

# ==================================================================


# –ü–∞—Ç—Ç–µ—Ä–Ω: —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ 1‚Äì50
CYRILLIC_DIGITS_ONLY = re.compile(r'^[0-9–∞-—è–ê-–Ø—ë–Å]{1,50}$')

@main.route('/submit-test', methods=['POST'])
@login_required
def submit_test():
    test_id = request.form['test_id']
    test = Test.query.get_or_404(test_id)
    questions = Question.query.filter_by(test_id=test.id).order_by(Question.question_number).all()

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º diagnostic_type –∑–∞—Ä–∞–Ω–µ–µ
    diagnostic_type = test.test_type.diagnostic_type

    primary_score = 0
    results = []

    for q in questions:
        user_answer = None

        # --- –¢–∏–ø—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º: input, single, contextual-input ---
        if q.question_type in ['input', 'single', 'contextual-input']:
            user_answer = request.form.get(f'answer_{q.id}', '').strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç–æ –∏ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + —Ü–∏—Ñ—Ä—ã
            if not user_answer:
                flash(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {q.question_number}: –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", "error")
                # ‚ùå –ù–µ –¥–µ–ª–∞–µ–º redirect ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                # –ü—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
                points = 0
                results.append({
                    'question': q,
                    'user_answer': user_answer,
                    'is_correct': False,
                    'points': points,
                    'max_points': 1
                })
                continue

            if not CYRILLIC_DIGITS_ONLY.match(user_answer):
                flash(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {q.question_number}: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (1‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤).", "error")
                points = 0
                results.append({
                    'question': q,
                    'user_answer': user_answer,
                    'is_correct': False,
                    'points': points,
                    'max_points': 1
                })
                continue

        # --- –¢–∏–ø—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ---
        elif q.question_type in ['multiple', 'contextual-multiple']:
            answers = request.form.getlist(f'answer_{q.id}')
            cleaned = sorted([a.strip() for a in answers if a.strip()])
            user_answer = '; '.join(cleaned)

        # --- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ---
        elif q.question_type == 'matching':
            answers = []
            for i in range(10):  # –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä
                val = request.form.get(f'answer_{q.id}_{i}')
                if val:
                    answers.append(f"{chr(65 + i)}-{val}")
                else:
                    answers.append(f"{chr(65 + i)}-?")

            user_answer = ', '.join(answers)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            def normalize_matching(answer_str):
                pairs = [p.strip().upper() for p in answer_str.split(',') if p.strip()]
                return ', '.join(sorted(pairs))

            user_answer_normalized = normalize_matching(user_answer)
            correct_answer_normalized = normalize_matching(q.correct_answer.strip())

            is_correct = user_answer_normalized == correct_answer_normalized
            points = 1 if is_correct else 0

            primary_score += points
            results.append({
                'question': q,
                'user_answer': user_answer,
                'is_correct': is_correct,
                'points': points,
                'max_points': 1
            })
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É

        # --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã ---
        else:
            user_answer = request.form.get(f'answer_{q.id}', '').strip()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ ---
        points = 0
        max_points = 1
        correct_answer_clean = q.correct_answer.strip() if q.correct_answer else ""

        if user_answer and correct_answer_clean:
            # üî¢ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
            if user_answer.isdigit() and correct_answer_clean.isdigit():
                user_set = set(user_answer)
                correct_set = set(correct_answer_clean)

                # –ó–∞–¥–∞–Ω–∏—è 8 –∏ 22 ‚Äî –æ—Å–æ–±–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤
                if q.question_number in [8, 22]:
                    max_points = 2
                    matches = len(user_set & correct_set)  # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    if matches == 5:
                        points = 2
                    elif matches >= 3:
                        points = 1
                    else:
                        points = 0
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî 1 –±–∞–ª–ª –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Ü–∏—Ñ—Ä
                else:
                    points = 1 if sorted(user_answer) == sorted(correct_answer_clean) else 0

            # üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ |)
            else:
                user_clean = user_answer.strip().lower()
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ | –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                correct_options = [opt.strip().lower() for opt in correct_answer_clean.split('|') if opt.strip()]
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª—é–±—ã–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
                if user_clean in correct_options:
                    points = 1
                else:
                    points = 0

        else:
            points = 0  # –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç

        primary_score += points  # ‚úÖ –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å

        results.append({
            'question': q,
            'user_answer': user_answer,
            'is_correct': points > 0,
            'points': points,
            'max_points': max_points
        })

    # --- ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ß–ò–ù–ï–ù–ò–Ø ‚Äî –í–ù–ï –¶–ò–ö–õ–ê ---
    essay_score = request.form.get('essay_score', '').strip()
    essay_points = 0

    if essay_score.isdigit():
        score = int(essay_score)
        if 0 <= score <= 22:
            essay_points = score
        else:
            flash("‚ùå –ë–∞–ª–ª –∑–∞ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 22.", "error")
    else:
        flash("‚ùå –ë–∞–ª–ª –∑–∞ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –æ—Ç 0 –¥–æ 22.", "error")

    primary_score += essay_points  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    # --- –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã ---
    secondary_score = get_secondary_score(primary_score)  # ‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ 100-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É

    # --- ‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í –ë–î ---
    if current_user.is_authenticated:
        try:
            result = Result(
                user_id=current_user.id,
                test_type=diagnostic_type,
                score=primary_score,
                total=secondary_score,
                timestamp=datetime.now(timezone.utc)
            )
            db.session.add(result)
            db.session.commit()
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    else:
        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        flash("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", "error")

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    return render_template(
        'result.html', 
        results=results, 
        primary_score=primary_score,
        essay_points=essay_points,
        secondary_score=secondary_score
    )



# ==================================================================

@main.route('/result')
def result():
    if 'current_test_id' not in session:
        return redirect(url_for('main.examenator'))

    test = Test.query.get_or_404(session['current_test_id'])
    questions = Question.query.filter_by(test_id=test.id).order_by(Question.question_number).all()
    user_answers = session.get('answers', [])

    correct = 0
    results = []

    for i, q in enumerate(questions):
        is_correct = user_answers[i].strip().lower() == q.correct_answer.strip().lower()
        if is_correct:
            correct += 1
        results.append({
            'question': q,
            'user_answer': user_answers[i],
            'is_correct': is_correct
        })

    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    session.pop('current_test_id', None)
    session.pop('current_question_index', None)
    session.pop('answers', None)

    return render_template('result.html', results=results, correct=correct, total=len(questions))


# ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—Ö–æ–¥, –ø—Ä–æ—Ñ–∏–ª—å) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# ==================================================================
@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form.get('email')
        telegram = request.form.get('telegram')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ None
        telegram = telegram.strip() if telegram else None
        if telegram == '':
            telegram = None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if User.query.filter_by(username=username).first():
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return redirect(url_for('main.register'))

        if User.query.filter_by(email=email).first():
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return redirect(url_for('main.register'))

        # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = generate_password_hash(password)

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=username,
            password=hashed_password,
            email=email,
            telegram=telegram  # –¢–µ–ø–µ—Ä—å None, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        )
        db.session.add(user)
        db.session.commit()

        send_confirmation_email(user)
        flash("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return redirect(url_for('main.index'))

    return render_template('register.html')


@main.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            flash("‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
            return redirect(url_for('main.profile'))
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

    return render_template('login.html')

@main.route('/profile')
@login_required  # ‚Üê —Ç–æ–∂–µ –∑–∞—â–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
def profile():
    user = User.query.get(session['user_id'])
    results = Result.query.filter_by(user_id=user.id).order_by(Result.timestamp.desc()).all()
    return render_template('profile.html', user=user, results=results)

@main.route('/logout')
def logout():
    session.pop('user_id', None)
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    return redirect(url_for('main.index'))


# ---------------------------------------------------------------------
# –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
def get_serializer():
    return URLSafeTimedSerializer(os.getenv('SECRET_KEY'))

def send_confirmation_email(user):
    s = get_serializer()
    token = s.dumps(user.email, salt='email-confirm-salt')

    confirm_url = url_for('main.confirm_email', token=token, _external=True)

    html = f"""
    <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–µ–π—Ä–æ—Å—Ç–∞—Ç, {user.username}!</h3>
    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:</p>
    <a href="{confirm_url}" style="display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px;">
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
    </a>
    <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å.</p>
    """

    msg = Message("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email", recipients=[user.email])
    msg.html = html
    mail.send(msg)


# ---------------------------------------------------------------------
# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è emeil
@main.route('/confirm/<token>')
def confirm_email(token):
    s = get_serializer()
    try:
        email = s.loads(token, salt='email-confirm-salt', max_age=3600)  # 1 —á–∞—Å
    except:
        flash("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
        return redirect(url_for('main.login'))

    user = User.query.filter_by(email=email).first()
    if not user:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect(url_for('main.login'))

    if user.confirmed:
        flash("–í–∞—à email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    else:
        user.confirmed = True
        db.session.commit()
        flash("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

    return redirect(url_for('main.profile'))

@main.route('/resend')
def resend_confirmation():
    if 'user_id' not in session:
        return redirect(url_for('main.login'))

    user = User.query.get(session['user_id'])
    if user.confirmed:
        flash("–í–∞—à email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    else:
        send_confirmation_email(user)
        flash("–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.")

    return redirect(url_for('main.profile'))


# ---------------------------------------------------------------------
